openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Delilah Resto API'
  description: 'App de pedidos de comida llamada Delilah Resto. Para ver el repositorio de Github: [https://github.com/jsduana/DelilahResto-Acamica](https://github.com/jsduana/DelilahResto-Acamica)'
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/jsduana/Delilah_Resto/1.0.0
tags:
- name: users
  description: Create Admin and Non-Admin, Read, Update, Delete and Login Users
- name: products
  description: Create, Read, Update and Delete Products
- name: orders
  description: Create, Read, Update and Delete Orders
paths:
  /users:
      post:
        tags:
          - users
        summary: Add a new user
        operationId: addUser
        responses:
          '200':
            description: User successfully created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: User with this username and/or email already exists in our database, email address is not valid or the request is missing information
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User Object to be created
          required: true
      get:
        security:
          - Authorization: []
        tags:
          - users
        summary: See all users
        operationId: getUsers
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
        responses:
          '200':
            description: Successful Operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '403':
            description: User not authorized to see this information
          '404':
            description: Database doesn't have any users yet
          '500':
            description: Internal Server Error
  '/users/{userId}':
      get:
        security:
          - Authentication: []
        tags:
          - users
        summary: Find user by ID
        description: Returns one user found by Id. Non Admin users can only see their own information and Admins can see it from all users.
        operationId: getUserById
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin or non Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: userId
            in: path
            description: ID of the user whose information we want to see
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '403':
            description: User not authorized to see this information. Token doesn't belong to an admin nor to the searched user
          '404':
            description: User with this id doesn't exist in our database
          '500':
            description: Internal Server Error
      put:
        security:
          - Authentication: []
        tags:
          - users
        summary: Update user information
        description: This operation can only be done by the user whose information wants to be modified. User token must be sent in the header
        operationId: updateUser
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin or non Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: userId
            in: path
            description: ID of the user whose information we want to update
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User successfully updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: User with this username and/or email already exists in our database or email address is not valid
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '403':
            description: User not authorized to update this information. Token doesn't belong to the user to update
          '404':
            description: User with this id doens't exist in our database
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
          description: Users information to update, none of the properties are obligatory
      delete:
        security:
          - Authentication: []
        tags:
          - users
        summary: Delete a User
        description: This operation can only be done by the user to delete or an Admin user. User token must be sent in the header
        operationId: deleteUser
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin or non Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: userId
            in: path
            description: Id of the user to be deleted
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: User successfully deleted
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '403':
            description: User not authorized to delete this information. Token doesn't belong to the user to delete nor to an Admin
          '404':
            description: User with this id doens't exist in our database
          '500':
            description: Internal Server Error
  /users/login:
      post:
        tags:
          - users
        summary: Log in a User to receive a Json Web Token
        operationId: userLogIn
        responses:
          '200':
            description: User successfully logged in
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    token:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
                    user_id:
                      type: integer
                      example: 1
          '401':
            description: User validation error, user information sent is incorrect
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: It can be the user's username or email
                    example: "lsimpson"
                  password:
                    type: string
                    example: "lisa1234"
          description: Username or email and password of the User to log in
          required: true
  /users/admins:
      post:
        security: 
          - Authorization: []
        tags: 
          - users
        summary: Add new Admin User
        operationId: addAdmin
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
        responses:
          '200':
            description: Admin User successfully created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: User with this username and/or email already exists in our database, email address is not valid or the request is missing information
          '403':
            description: User not authorized to create this information. Token doesn't belong to an admin
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Admin User Object to be created
          required: true
  /products:
      post:
        security:
          - Authorization: []
        tags:
          - products
        summary: Add a new product
        operationId: addProduct
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
        responses:
          '200':
            description: Product successfully created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
          '400':
            description: Product with this product name and/or abbreviation already exists in our databaseor the request is missing information
          '403':
            description: User not authorized to create this information
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Product object to be created
          required: true
      get:
        security: 
          - Authentication: []
        tags:
          - products
        summary: See all products
        operationId: getProducts
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin or non Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '404':
            description: Database doesn't have any products yet
          '500':
            description: Internal Server Error
  '/products/{productId}':
      get:
        security: 
          - Authentication: []
        tags:
          - products
        summary: See a product selected by Id
        operationId: getProductById
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin or non Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: productId
            in: path
            description: ID of the product to be seen
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Successful Operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '404':
            description: Database doesn't have any product with the given id
          '500':
            description: Internal Server Error
      put:
        security: 
          - Authorization: []
        tags:
          - products
        summary: Update a products information
        operationId: updateProduct
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: productId
            in: path
            description: ID of the product to update
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Product successfully updated
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Product'
          '400':
            description: Product with this product name and/or abbreviation already exists in our database
          '403':
            description: User not authorized to update this information
          '404':
            description: Database doesn't have any product with the given id
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdate'
          description: Products information to update, none of the properties are obligatory
      delete:
        security: 
          - Authorization: []
        tags:
          - products
        summary: Delete a product selected by Id
        operationId: deleteProduct      
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: productId
            in: path
            description: ID of the product to delete
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Product successfully deleted
          '403':
            description: User not authorized to delete this information
          '404':
            description: Database doesn't have any product with the given id
          '500':
            description: Internal Server Error
  /orders:
      post:
        security: 
          - Authentication: []
        tags:
          - orders
        summary: Add a new order
        operationId: addOrder
        parameters:
          - name: Authorization
            in: header
            description: Token of a non Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
        responses:
          '200':
            description: Order successfully created
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Order'
          '400':
            description: The request is missing information or one, more of the product quantities sent is not a number or payment value is incorrect
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '404':
            description: One or more of the products sent in the request doesn't exist in our database
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrder'
          description: Order object to create
          required: true
      get:
        security: 
          - Authentication: []
        tags:
          - orders
        summary: See all orders
        operationId: getOrders
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin or non Admin user given in the login endpoint. Admins see all orders from all users and non Admins only all their OWN orders
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Order'
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '404':
            description: Database doesn't have any orders yet
          '500':
            description: Internal Server Error
  '/orders/{orderId}':
      get:
        security: 
          - Authentication: []
        tags:
          - orders
        summary: See one order selected by Id
        operationId: getOrderById
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin or non Admin user given in the login endpoint. Admins can see all orders from all users and non Admins only one of their OWN
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: orderId
            in: path
            description: ID of order to return
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Order'
          '401':
            description: User validation error, log in to see this page. User token is missing in the header or is incorrect
          '403':
            description: User not authorized to see this information
          '404':
            description: Database doesn't have any orders with the given id
          '500':
            description: Internal Server Error
      put:
        security: 
          - Authorization: []
        tags:
          - orders
        summary: Update the order_state of a order selected by Id
        operationId: updateOrder
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: orderId
            in: path
            description: ID of order to update
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Order successfully updated
          '400':
            description: Order doesn't exist in our database, the order already had the order state value given in the request or order_state value sent is not valid
          '403':
            description: User not authorized to update this information
          '500':
            description: Internal Server Error
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties: 
                  order_state:
                    type: string
                    enum:
                      - new
                      - confirmed
                      - preparing
                      - sending
                      - delivered
                      - canceled
                    example: confirmed
          description: Orders information to update
      delete:
        security: 
          - Authorization: []
        tags:
          - orders
        summary: Delete a order selected by Id
        operationId: deleteOrder      
        parameters:
          - name: Authorization
            in: header
            description: Token of an Admin user given in the login endpoint
            required: true
            schema:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1ODk4NDkwNDV9.b7l5Xgphm4cSHne6Pibk1Oez8H6bBcH4KVj6apsh-Po"
          - name: orderId
            in: path
            description: ID of order to delete
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Order successfully deleted
          '403':
            description: User not authorized to see this information
          '404':
            description: Database doesn't have any orders with the given id
          '500':
            description: Internal Server Error
components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
        - full_name
        - email
        - phone
        - delivery_address
      properties:
        user_id:
          type: integer
          readOnly: true
          example: 3
        username:
          type: string
          maxLength: 60
          example: "lsimpson"
        password:
          type: string
          maxLength: 60
          writeOnly: true
          example: "lisa1234"          
        full_name:
          type: string
          maxLength: 60
          example: "Lisa Simpson"
        email:
          type: string
          maxLength: 60
          example: "lsimpson@gmail.com"
        phone:
          type: integer
          example: "15443322"
        delivery_address:
          type: string
          maxLength: 60
          example: "Avenida Siempreviva 742"          
        is_admin:
          type: boolean
          description: TRUE if the user is an admin & FALSE if the user is not an admin
          readOnly: true
          default: "FALSE"
          example: "TRUE"
    Product:
      type: object
      required:
        - product_name
        - abbreviation
        - price
        - img_url
        - product_description
      properties:
        product_id:
          type: integer
          readOnly: true
          example: 7
        product_name:
          type: string
          maxLength: 60
          example: "Pizza grande especial"
        abbreviation:
          type: string
          maxLength: 8          
          example: PizzaEsp
        price:
          type: integer
          example: 380          
        link_img:
          type: string
          maxLength: 200              
          example: "https://images.unsplash.com/photo-1545016803-a7e357a737e4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60"
        product_description:
          type: string
          maxLength: 150          
          example: "Pizza grande especial de 8 porciones"  
    Order:
      type: object
      properties:
        order_id: 
          type: integer
          format: int64
          readOnly: true
          example: 25
        status: 
          type: string
          enum:
            - new
            - confirmed
            - preparing
            - sending
            - delivered
            - canceled
          example: "confirmed"    
        date: 
          type: string
          readOnly: true
          format: date-time
          example: "2020-05-19T16:28:20.000Z"          
        order_description: 
          type: string
          maxLength: 150
          example: "1xPizzaMuz 1xCheeChoc 1xAgua "
        payment_method: 
          type: string
          enum:
            - cash
            - credit card
            - debit card
          example: "cash"
        total: 
          type: integer
          example: 570
        user_id: 
          type: integer
          description: id of user that sent the order
          example: 1
        products:
          type: array
          items:
            type: object
            properties:
              product_quantity: 
                type: integer
              product_id:
                type: integer
                readOnly: true
              product_name:
                type: string
                maxLength: 60
              abbreviation:
                type: string
                maxLength: 8          
              price:
                type: integer
              link_img:
                type: string
                maxLength: 200              
              product_description:
                type: string
                maxLength: 150
            example:
            - product_quantity: 1
              product_id: 7
              product_name: "Pizza grande de muzzarella"
              abbreviation: "PizzaMuz"
              price: 400
              img_url: "https://images.unsplash.com/photo-1545016803-a7e357a737e4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60"
              product_description: "Pizza grande de muzzarella de 8 porciones"
            - product_quantity: 1
              product_id: 30
              product_name: "Cheesecake de Chocolate (Porción)"
              abbreviation: "CheeChoc"
              price: 110
              img_url: "https://images.unsplash.com/photo-1508737804141-4c3b688e2546?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60"
              product_description: "Una porción de Cheesecake de chocolate suave y cremoso"
            - product_quantity: 1
              product_id: 40
              product_name: "Agua mineral"
              abbreviation: "Agua"
              price: 60
              img_url: "https://images.unsplash.com/photo-1546498159-9a2fac87e770?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=400&q=60"
              product_description: "Agua mineral sin gas 500 ml"
    CreateOrder:
      type: object
      required:
        - payment_method
        - products
        - product_id
        - product_quantity
      properties:
        payment_method: 
          type: string
          example: "cash"
        products:
          type: array
          items: 
            type: object
            properties:
              product_id: 
                type: integer
              product_quantity: 
                type: integer
            example:
            - product_id: 7
              product_quantity: 1
            - product_id: 30
              product_quantity: 1
            - product_id: 40
              product_quantity: 1
    UserUpdate:
      type: object
      properties:
        username:
          type: string
          maxLength: 60
          example: "lsimpson"
        password:
          type: string
          maxLength: 60
          writeOnly: true
          example: "lisa7890"          
        full_name:
          type: string
          maxLength: 60
          example: "Lisa Simpson"
        email:
          type: string
          maxLength: 60
          example: "lsimpson@gmail.com"
        phone:
          type: integer
          example: "15112233"
        delivery_address:
          type: string
          maxLength: 60
          example: "Avenida Siempreviva 987"
      description: User object to send for updates, none of the properties are obligatory
    ProductUpdate:
      type: object
      properties:
        product_name:
          type: string
          maxLength: 60
          example: "Pizza grande especial"
        abbreviation:
          type: string
          maxLength: 8          
          example: PizzaEsp
        price:
          type: integer
          example: 400          
        link_img:
          type: string
          maxLength: 200              
          example: "https://images.unsplash.com/photo-1545016803-a7e357a737e4?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60"
        product_description:
          type: string
          maxLength: 150          
          example: "Pizza grande especial de 8 porciones"
      description: Product object to send for updates, none of the properties are obligatory
  securitySchemes:
    Authentication:      
      type: http
      scheme: bearer
      description: JWT of an admin or non admin User
      bearerFormat: JWT
    Authorization:      
      type: http
      scheme: bearer
      description: JWT of an admin User
      bearerFormat: JWT